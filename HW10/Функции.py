# 1) Напишите функцию, чтобы найти максимальное из трех чисел
def max_number(num1, num2, num3):
    if num1 > num2 and num1 > num3:
        return num1
    elif num2 > num1 and num2 > num3:
        return num2
    elif num3 > num1 and num3 > num2:
        return num3
    elif num1 == num2 or num2 == num3:
        print("Вы ввели два или более обинаковых числа")
print(max_number(1, 2,2))

# 2) Напишите функцию, для суммирования всех чисел в списке. Не использовать встроенную функцию sum
# Образец списка: (8, 2, 3, 0, 7)
# Результат: 20
def sumary(numbers):
    total = 0
    for x in numbers:
        total += x
    return total
print(sumary((8, 2, 3, 0, 7)))

# 3) Напишите функцию, для умножения всех чисел в списке
# Образец списка: (8, 2, 3, -1, 7)
#Результат: -336
def multiplication(nums):
    total = 1
    for x in nums:
        total *= x
    return total
print(multiplication((8, 2, 3, -1, 7)))

# 4) Напишите функцию, для переворота строки
# Пример строки: 1234abcd
# Результат: dcba4321
def reversed_my(variable):
    res=''
    for i in range(len(variable)-1, -1, -1):
        res+=variable[i]
    return res
str1 = reversed_my(input())
print(str1)

# 5) Напишите функцию, для вычисления факториала числа (неотрицательное целое число).
# Функция принимает число в качестве аргумента
# 5! = 1*2*3*4*5
def factorial(n):
    if n == 1:
        return 1
    return factorial(n - 1) * n
print(factorial(5))

# 6) Напишите функцию, которая принимает строку и вычисляет количество букв верхнего и нижнего регистра
# Пример строки: ‘The quick Brow Fox’
# Результат:
# Кол-во символов в верхнем регистре: 3
# Кол-во символов в нижнем регистре: 12

# 7) Напишите функцию, которая принимает слово и определяет является ли оно палиндромом
# (палиндром — Слово или фраза, которые одинаково читаются слева направо и справа налево.)
def isPalindrome(string):
#Конвертируем в строку, поскольку пользователь может ввести также и число
    Pal = str(string)
#  Pal[::-1] - переворот строки
# Eсли перевёрнутая строка равна обычной строке, то это палиндром и возвращается значение True
    if Pal[::-1].lower:
        return True
# Иначе возвращает False
    else:
        return False
print(isPalindrome("А роза упала на лапу Азора"))

# 8)Пользователь делает вклад в размере n рублей сроком на years лет под 10% годовых. Написать функцию bank,
# принимающая количество денег и лет, и возвращающую сумму, которая будет на счете через years лет
def task(money,years):
    for _ in range(years):
        money = (1 + 10/100) * money
    return money
money = int(input("Сколько у вас денег?"))
years = int(input("На сколько лет оформить вклад?"))
print(task(money, years))

# 9) С помощью функции извлеките из списка числа, делимые на 15
# nums = [45, 55, 60, 37, 100, 105, 220]
nums = [45, 55, 60, 37, 100, 105, 220]
result = []
for x in nums:
    if x % 15 == 0:
        result.append(x)
print(result)

# 10 ) Напишите функцию, которое принимает целое число и возвращает сумму цифр целого числа 108 -> 9
def sum_num(number):
    sum = 0
    for digit in str(number):
       sum += int(digit)
    return sum
number = int(input("Введите число: "))
print(sum_num(number))
# 11) Напишите функцию, которая будет принимать количество секунд и возвращать их в днях-часах-минутах-секундах
# 91000 секунд = 1 день, 1 час, 16 минут, 40 секунд

# 12) Создайте пакет ‘figures’, состоящий из трех подпакетов: ‘triangle’, ‘circle’, ‘square’.
# В каждом подпакете будем иметь файл code.py, где создадим ряд функций:
# – для пакета ‘circle’: функции circle_perimeter() – вычисляет длину окружности, circle_area() – вычисляет
# площадь окружности. Еще заведем переменную default_radius = 5, которая будет скрыта при импорте модуля.
# Ее назначение – дефолтный радиус для окружности, если пользователь не введет свой. Обе функции принимают на вход
# только радиус.
# – для пакета ‘triangle’: функции triangle_perimeter() – вычисляет периметр треугольника,
# triangle_area() – вычисляет площадь фигуры. Дополнительно создадим три переменные (длины сторон треугольника):
# a = 7, b = 2, c = 8, которые также не будут видны при импорте. На вход функциям передается длина трех сторон
# (если пользователь ничего не введет, то используются значения по умолчанию).
# – для пакета ‘square’: функции square_perimeter() – вычисляет периметр квадрата,
# square_area() – вычисляет площадь фигуры. Дополнительная переменная a = 15 не доступна при импорте
# и принимается функциями, если пользователь не предоставил свои размеры стороны квадрата.